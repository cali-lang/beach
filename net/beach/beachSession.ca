/*
 * Copyright 2015 Austin Lehman
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include uuid;
include reflect;
include file;
include json;
include thread;

/**
 * Default session manager. To implement a custom session manager simple 
 * create a new class that implements the public methods of this class.
 */
class sessionManager : lock
{
	sessionDir = 'data/sessions/';
	
	preSessionQueueSize = 100;
	
	preSessions = {};
	preSessQueue = [];
	
	/*********************************************************************************
	 * Public methods.
	 ********************************************************************************/
	
	/**
	 * Constructor taks the pre-session queue size. The pre-session 
	 * queue holds new sessions until the session id cookie is seen 
	 * from the web server. At that point the session is removed from 
	 * from the queue and stored. The queue is a tail-drop queue.
	 * @p PreSessionQueueSize is a int with the queue size.
	 */
	public sessionManager(int PreSessionQueueSize)
	{
		this.lock();
		this.preSessionQueueSize = PreSessionQueueSize;
	}
	
	/**
	 * Gets a session object. If no session exists then a new one 
	 * is created. To determine if a returned session is new call 
	 * the isNew() method of beachSession object.
	 * @p IpAddress is a string with the client IP address.
	 * @p Id is a string with the session ID. (Optional)
	 * @r A beachSession object.
	 */
	public get(string IpAddress, string Id = null)
	{
		sess = null;
		
		if(Id)
		{
			this.setLock();
			sess = this.getPreSession(Id);
			if(sess)
			{
				this.moveSession(sess);
			}
			this.unlock();
			
			if(!sess)
			{
				sess = this.getSession(Id);
			}
		}
		
		if(!sess)
		{
			sess = new beachSession(IpAddress, uuid.get(), true);
			this.setLock();
			this.addPreSession(sess);
			this.unlock();
		}
		
		return sess;
	}
	
	/**
	 * Stores the provided session object.
	 * @p Sess is a session object to store.
	 * @r this
	 */
	public saveSession(object Sess)
	{
		this.addSession(Sess);
		return this;
	}
	
	/**
	 * Removes the session from the pre-session queue if it exists 
	 * there or from the session store if it exists there.
	 * @p Id is a string with the session id.
	 * @r this
	 */
	public removeSession(string Id)
	{
		this.setLock();
		if(map.containsKey(this.preSessions, Id))
		{
			this.removePreSession(Id);
		}
		else
		{
			sess = this.findSession(Id);
			if(sess) { this.removeSession(Id); }
		}
		this.unlock();
		return this;
	}
	
	/*********************************************************************************
	 * Private methods.
	 ********************************************************************************/
	
	/**
	 * Gets the session object from the pre-session queue with the 
	 * provided session ID and returns the session if found. If not 
	 * found it returns null.
	 * @p Id is a string with the session ID.
	 * @r A session object if found or null if not.
	 */
	private getPreSession(string Id)
	{
		sess = null;
		if(map.containsKey(this.preSessions, Id))
		{
			sess = this.preSessions[Id];
		}
		return sess;
	}
	
	/**
	 * Adds a session object to the pre-session queue. If the queue is 
	 * at max queue size, then the oldest session is dropped first.
	 * @p sess is a session object to add to the pre-session queue.
	 * @r this
	 */
	private addPreSession(object sess)
	{
		// Queue management ... standard tail drop.
		if(#this.preSessQueue > (this.preSessionQueueSize - 1))
		{
			for(i = #this.preSessQueue; i > this.preSessionQueueSize - 1; i--)
			{
				sess = this.preSessQueue[i];
				map.remove(this.preSessions, sess.getId());
				list.removeAt(this.preSessQueue, i);
			}
		}
		
		this.preSessions[sess.getId()] = sess;
		this.preSessQueue @= sess;
		
		return this;
	}
	
	/**
	 * Removes a pre-session with the provided session ID.
	 * @p Id is a string with the session ID to remove.
	 * @r this
	 */
	private removePreSession(string Id)
	{
		if(map.containsKey(this.preSessions, Id))
		{
			try
			{
				sess = this.preSessions[Id];
				if(sess)
				{
					map.remove(this.preSessions, Id);
					list.remove(this.preSessQueue, sess);
				}
			}
			catch(e) { }
		}
		
		return this;
	}
	
	/**
	 * Gets the stored session object with the provided session ID.
	 * @p Id is a string with the session ID.
	 * @r A session object if found or null if not.
	 */
	private getSession(string Id)
	{
		sess = null;
		
		sfile = this.sessionDir + Id + ".sess";
		if(path.exists(sfile) && path.isFile(sfile))
		{
			sess = json.unpack(file.read(sfile));
		}
		
		return sess;
	}
	
	/**
	 * Adds a session to the session store.
	 * @p sess is a session object to add.
	 * @r this
	 */
	private addSession(object sess)
	{
		sfile = this.sessionDir + sess.getId() + ".sess";
		file.write(sfile, json.pack(sess).toString());
		return this;
	}
	
	/**
	 * Removes a session from the session store.
	 * @p Id is a string with the session ID to remove.
	 * @r this
	 */
	public removeSession(string Id)
	{
		sfile = this.sessionDir + Id + ".sess";
		if(path.exists(sfile) && path.isFile(sfile))
		{
			path.unlink(sfile);
		}
		return this;
	}
	
	/**
	 * Moves the provided session from the pre-sessio queue to 
	 * permanent session storage. It also sets isNew for the 
	 * session to false.
	 * @p sess is a sesson object to move.
	 * @r this
	 */
	public moveSession(object sess)
	{
		sess.isNew = false;
		this.addSession(sess);
		this.removePreSession(sess.getId());
		return this;
	}
}

/**
 * Beach session object. This object is used to house session 
 * data.
 */
class beachSession
{
	id = null;
	created = null;
	isNew = true;
	ipAddress = null;
	userName = null;
	
	params = {};
	
	/**
	 * Constructor creates a new beachSession object with the 
	 * Id and IpAddress. This object shouldn't be instantiated from 
	 * user code, it will be constructed by a call to 
	 * sessionManager.get().
	 * @p IpAddress is a string with the session IP address.
	 * @p Id is a string with the session ID.
	 * @p IsNew is a bool with true if it's a new session and false if not.
	 */
	public beachSession(string IpAddress, string Id, bool IsNew = true)
	{
		this.id = Id;
		this.ipAddress = IpAddress;
		this.created = (new date()).getTime();
		this.isNew = IsNew;
	}
	
	/**
	 * Gets the session ID.
	 * @r A string with the session ID.
	 */
	public getId()
	{
		return this.id;
	}
	
	/**
	 * Check to see if a session is new or not.
	 * @r A bool with true if new or false if not.
	 */
	public isNew()
	{
		return this.isNew;
	}
	
	/**
	 * Gets the IP address of the session.
	 * @r A string with the session IP address.
	 */
	public getIpAddress()
	{
		return this.ipAddress;
	}
	
	/**
	 * Gets the date in milliseconds that the session was created.
	 * @r A int with the milliseconds when the session was created.
	 */
	public getCreated()
	{
		return this.created;
	}
	
	/**
	 * Gets the session user name.
	 * @r A string with the session user name.
	 */
	public getUserName()
	{
		return this.userName;
	}
	
	/**
	 * Sets the session user name.
	 * @p UserName is a string with the user name to set.
	 * @r this
	 */
	public setUserName(string UserName)
	{
		this.userName = UserName;
		return this;
	}
	
	/**
	 * Gets the stored value for the provided key. If the key doesn't 
	 * exist it will return null.
	 * @p key is a string with the key to get.
	 * @r A string with the value, or null if not found.
	 */
	public get(string key)
	{
		if(map.containsKey(this.params, key)) { return this.params[key]; }
		else { return null; }
	}
	
	/** 
	 * Gets all stored values and returns it as a map. Note that if 
	 * you update the returned map the actual stored session values 
	 * won't be updated.
	 */
	public getAll()
	{
		return this.params;
	}
	
	/**
	 * Sets a key/value pair to be stored in the session.
	 * @p key is a string with the key.
	 * @p val is a string with the value to be stored.
	 * @r this
	 */
	public set(string key, string val)
	{
		this.params[key] = val;	
		return this;
	}
}
